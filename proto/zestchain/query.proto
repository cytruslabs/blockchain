syntax = "proto3";
package cytruslabs.zestchain.zestchain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "zestchain/params.proto";
import "zestchain/promo_count.proto";
import "zestchain/promo.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/cytruslabs/zestchain/x/zestchain/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cytruslabs/zestchain/zestchain/params";
  }
  // Queries a PromoCount by index.
	rpc PromoCount(QueryGetPromoCountRequest) returns (QueryGetPromoCountResponse) {
		option (google.api.http).get = "/cytruslabs/zestchain/zestchain/promo_count";
	}
// Queries a Promo by index.
	rpc Promo(QueryGetPromoRequest) returns (QueryGetPromoResponse) {
		option (google.api.http).get = "/cytruslabs/zestchain/zestchain/promo/{index}";
	}

	// Queries a list of Promo items.
	rpc PromoAll(QueryAllPromoRequest) returns (QueryAllPromoResponse) {
		option (google.api.http).get = "/cytruslabs/zestchain/zestchain/promo";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetPromoCountRequest {}

message QueryGetPromoCountResponse {
	PromoCount PromoCount = 1 [(gogoproto.nullable) = false];
}
message QueryGetPromoRequest {
	  string index = 1;

}

message QueryGetPromoResponse {
	Promo promo = 1 [(gogoproto.nullable) = false];
}

message QueryAllPromoRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPromoResponse {
	repeated Promo promo = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
